#!/usr/bin/env python
import copy
import sys

from chimera.core.callback import callback
from chimera.core.cli import ChimeraCLI, action
from chimera.core.compat import freeze_support


class ChimeraAutoSkyFlat(ChimeraCLI):
    def __init__(self):
        ChimeraCLI.__init__(self, "chimera-skyflat", "SkyFlats", 0.1)
        self.addHelpGroup("SKYFLAT", "skyFlats")
        self.addController(name="skyflat",
                           cls="AutoSkyFlat",
                           required=True,
                           helpGroup="SKYFLAT",
                           help="Auto Sky Flats")
        self.addParameters(
            dict(name="sun_alt_hi", long="sun-high", type="float", helpGroup="SKYFLAT", help="Highest Sun altitude",
                 metavar="FILE"),
            dict(name="sun_alt_low", long="sun-low", type="float", helpGroup="SKYFLAT", help="Lowest Sun altitude",
                 metavar="FILE"),
            dict(name='filter', long='filter', short='f', required=True, type='string', helpGroup='SKYFLAT', help='Skyflat filter name'),
            dict(name='number', long='number', short='n', type='int', helpGroup='SKYFLAT', help='Number of skyflats to take on the filter')
        )

    @action(long="auto", help="Does a sequence of sky flats", helpGroup="SKYFLAT")
    def doSequence(self, options):
        """
        Sets variables using command line options
        Take skyflats according to options
        """
        self.out("Pointing scope to the zenith and waiting for the Sun to reach skyflats altitude range")
        if options.sun_alt_low > options.sun_alt_hi:
            self.exit("sunHi needs to be less than sunLow")
        if options.sun_alt_hi:
            self.skyflat["sun_alt_hi"] = options.sun_alt_hi
        if options.sun_alt_low:
            self.skyflat["sun_alt_low"] = options.sun_alt_low
        if options.number:
            num = options.number
        else:
            num = None

        @callback(self.localManager)
        def exposeComplete(filter_id, i_flat, exptime, counts):
            self.out('Filter: %s, Skyflat # %i - Exposure time: %3.2f seconds - Counts: %3.2f' % (filter_id, i_flat, exptime, counts))

        self.skyflat.exposeComplete += exposeComplete

        for filter_id in options.filter.split(','):
            self.skyflat.getFlats(filter_id, n_flats=num)
        self.out("Finished.")

        self.skyflat.exposeComplete -= exposeComplete

        # @callback(self.localManager)
        # def exposeBegin(request):
        #     self.out('Taking %i flats on filter %s' % (num, filter_id))




    def __abort__(self):
        self.out("\naborting... ", endl="")

        # copy self.skyflat Proxy because we are running from a differente
        # thread (yes, Pyro is tricky!)
        skyflat = copy.copy(self.skyflat)
        skyflat.abort()


def main():
    cli = ChimeraAutoSkyFlat()
    cli.run(sys.argv)
    cli.wait()


if __name__ == '__main__':
    freeze_support()
    main()
